<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2021-04-19 Mon 07:43 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>363 Final Report: Stroop test</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Andrej Glavic, Yuanxi Liu 20688855, Rachel Morton 20925026, Wasam Syed 20746474, Amy Wang" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content">
<h1 class="title">363 Final Report: Stroop test</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org096d44f">1. Introduction</a></li>
<li><a href="#org97f3a91">2. Methods</a></li>
<li><a href="#org2b5318c">3. Results</a>
<ul>
<li><a href="#org8fbdb6f">3.1. 1. Collect data into a dataframe:</a></li>
<li><a href="#orgbc1c4fe">3.2. 2 Scatter Plot with Line of Best fit</a></li>
<li><a href="#org4a9c239">3.3. 3 Correct Stroop Responses and Calculated Average Response Time</a></li>
<li><a href="#org86b8c42">3.4. 4 Incorrect Stroop Responses Analysis</a></li>
<li><a href="#orgcf74080">3.5. Descriptive statistics</a></li>
</ul>
</li>
<li><a href="#org50c20d0">4. Discussion and Conclusions</a></li>
<li><a href="#org58cb0f1">5. References</a></li>
</ul>
</div>
</div>

<div id="outline-container-org096d44f" class="outline-2">
<h2 id="org096d44f"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
John Ridley Stroop published the groundbreaking, "Studies of interference in serial verbal ractions" in the Journal of Experimental Psychology in 1935 \cite{Stroop1935}. Ever since, psychology students worldwide learn about the "Stroop effect", where incongruent stimuli take longer to process than do congruent stimuli. Even though Stroop wasn't the first to publish this effect, his experiments were foundational; his original study is one of the most-cited papers in the history of experimental psychology \cite{MacLeod1991Stroop}.
</p>

<p>
In one part of Stroop's classic study, participants had to say the ink colour of the printed word rather than read the word. For instance, if the word 'RED' was printed in purple ink, they were to say, "purple" and not "red". Stroop noticed that subjects took significantly longer to complete this colour naming task than one where they just had to name the colour of coloured squares. This difference in response time, or processing speed, is what is known as the Stroop effect.
</p>
</div>
</div>

<div id="outline-container-org97f3a91" class="outline-2">
<h2 id="org97f3a91"><span class="section-number-2">2</span> Methods</h2>
<div class="outline-text-2" id="text-2">
<p>
There have been many variations on Stroop's experiment over the years. Since key presses are easier to time than a person reading aloud, we chose to go with a "manual" Stroop task where reaction time is measured by how long it takes a participant to press a certain key on a keyboard after being shown the stimuli on the computer screen. We used the psychopy library in python to program the experiment \cite{Peirce2019Psychopy} and followed the example shown in the demo Stroop task at psytoolkit.org \cite{PsytoolkitStroopDemo}. 
</p>

<p>
Computational tools used? R??
</p>
</div>
</div>

<div id="outline-container-org2b5318c" class="outline-2">
<h2 id="org2b5318c"><span class="section-number-2">3</span> Results</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org8fbdb6f" class="outline-3">
<h3 id="org8fbdb6f"><span class="section-number-3">3.1</span> 1. Collect data into a dataframe:</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #b22222;">#</span><span style="color: #b22222;">graphics :file "StroopPlot.png"</span>
<span style="color: #a020f0;">import</span> pandas <span style="color: #a020f0;">as</span> pd
<span style="color: #a020f0;">import</span> os
<span style="color: #a020f0;">import</span> numpy <span style="color: #a020f0;">as</span> np
<span style="color: #a020f0;">import</span> matplotlib.pyplot <span style="color: #a020f0;">as</span> plt

<span style="color: #a0522d;">files</span> = os.listdir()

<span style="color: #b22222;"># </span><span style="color: #b22222;">Identify all csv files in the directory</span>
<span style="color: #a0522d;">csv_files</span> = []
<span style="color: #a020f0;">for</span> <span style="color: #483d8b;">file</span> <span style="color: #a020f0;">in</span> files:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #483d8b;">file</span>[-4:] == <span style="color: #8b2252;">".csv"</span>:
        csv_files.append(<span style="color: #483d8b;">file</span>)
<span style="color: #a0522d;">data</span> = pd.DataFrame()
<span style="color: #a020f0;">for</span> <span style="color: #483d8b;">file</span> <span style="color: #a020f0;">in</span> csv_files:
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a0522d;">data</span> = data.append(pd.read_csv(<span style="color: #483d8b;">file</span>))

pd.set_option(<span style="color: #8b2252;">'display.max_rows'</span>, <span style="color: #008b8b;">None</span>)
</pre>
</div>
</div>
</div>


<div id="outline-container-orgbc1c4fe" class="outline-3">
<h3 id="orgbc1c4fe"><span class="section-number-3">3.2</span> 2 Scatter Plot with Line of Best fit</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #b22222;">#</span><span style="color: #b22222;">output graphics :file "StroopPlotScatter.jpg"</span>

<span style="color: #a0522d;">congruent_y</span> = np.array([])
<span style="color: #a0522d;">congruent_x</span> = np.array([])
<span style="color: #a0522d;">incongruent_y</span> = np.array([])
<span style="color: #a0522d;">incongruent_x</span> = np.array([])


<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> data.iterrows():
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> i[1][<span style="color: #8b2252;">'Correct'</span>]:
        <span style="color: #a020f0;">if</span> i[1][<span style="color: #8b2252;">'Word'</span>] == i[1][<span style="color: #8b2252;">'Ink'</span>]:
            <span style="color: #a0522d;">congruent_x</span> = np.append(congruent_x, i[0]+1)
            <span style="color: #a0522d;">congruent_y</span> = np.append(congruent_y, i[1][<span style="color: #8b2252;">'Response Time'</span>]*1000)
        <span style="color: #a020f0;">else</span>:
            <span style="color: #a0522d;">incongruent_x</span> = np.append(incongruent_x, i[0]+1)
            <span style="color: #a0522d;">incongruent_y</span> = np.append(incongruent_y, i[1][<span style="color: #8b2252;">'Response Time'</span>]*1000)

plt.scatter(congruent_x, congruent_y)
<span style="color: #a0522d;">m</span>, <span style="color: #a0522d;">b</span> = np.polyfit(congruent_x, congruent_y, 1)
plt.plot(congruent_x, m*congruent_x + b)

<span style="color: #a0522d;">scatter</span> = plt.scatter(incongruent_x, incongruent_y)
<span style="color: #a0522d;">m</span>, <span style="color: #a0522d;">b</span> = np.polyfit(incongruent_x, incongruent_y, 1)
plt.plot(incongruent_x, m*incongruent_x + b)
plt.xticks(np.arange(1, 21, 1.0))
plt.legend([<span style="color: #8b2252;">"Congruent Stroop"</span>, <span style="color: #8b2252;">"Incongruent Stroop"</span>])
plt.title(<span style="color: #8b2252;">"Stroop Responses Scatter Plot"</span>)
plt.xlabel(<span style="color: #8b2252;">"Trial Number in Experiment"</span>)
plt.ylabel(<span style="color: #8b2252;">"Response Time(ms)"</span>)

plt.savefig(<span style="color: #8b2252;">"StroopPlotScatter.jpg"</span>)
<span style="color: #8b2252;">"StroopPlotScatter.jpg"</span>

</pre>
</div>


<div class="figure">
<p><img src="StroopPlotScatter.jpg" alt="StroopPlotScatter.jpg" />
</p>
</div>
</div>
</div>


<div id="outline-container-org4a9c239" class="outline-3">
<h3 id="org4a9c239"><span class="section-number-3">3.3</span> 3 Correct Stroop Responses and Calculated Average Response Time</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #b22222;">#</span><span style="color: #b22222;">output graphics :file "StroopPlotAverage.jpg"</span>
<span style="color: #b22222;"># </span><span style="color: #b22222;">Average Congruent vs Incongruent Time</span>
<span style="color: #a0522d;">congruent</span> = np.array([])
<span style="color: #a0522d;">incongruent</span> = np.array([])
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> data.iterrows():
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> i[1][<span style="color: #8b2252;">'Correct'</span>]:
        <span style="color: #a020f0;">if</span> i[1][<span style="color: #8b2252;">'Word'</span>] != i[1][<span style="color: #8b2252;">'Ink'</span>]:
            <span style="color: #a0522d;">congruent</span> = np.append(congruent, i[1][<span style="color: #8b2252;">'Response Time'</span>])
        <span style="color: #a020f0;">else</span>:
            <span style="color: #a0522d;">incongruent</span> = np.append(incongruent, i[1][<span style="color: #8b2252;">'Response Time'</span>])

<span style="color: #a020f0;">print</span>(np.average(congruent))
<span style="color: #a020f0;">print</span>(np.average(incongruent))
<span style="color: #a020f0;">print</span>(<span style="color: #8b2252;">"DONE"</span>)

<span style="color: #a0522d;">width</span> = 0.35
<span style="color: #a0522d;">state</span> = (<span style="color: #8b2252;">'Congruent'</span>, <span style="color: #8b2252;">'Incongruent'</span>)
<span style="color: #a0522d;">state_average</span> = (np.average(congruent)*1000, np.average(incongruent)*1000)
<span style="color: #a0522d;">fig</span>, <span style="color: #a0522d;">ax</span> = plt.subplots()
<span style="color: #a0522d;">rects</span> = ax.bar(np.arange(2)+width, state_average, width, color=<span style="color: #8b2252;">'b'</span>)
ax.set_ylabel(<span style="color: #8b2252;">'Response Time (ms)'</span>)
ax.set_title(<span style="color: #8b2252;">'Response Time based on Congruency'</span>)
ax.set_xticks(np.arange(2)+width)
ax.set_xticklabels((<span style="color: #8b2252;">'Congruent'</span>, <span style="color: #8b2252;">'Incongruent'</span>))

plt.savefig(<span style="color: #8b2252;">"StroopPlotAverage.jpg"</span>)
<span style="color: #8b2252;">"StroopPlotAverage.jpg"</span>
</pre>
</div>


<div class="figure">
<p><img src="StroopPlotAverage.jpg" alt="StroopPlotAverage.jpg" />
</p>
</div>
</div>
</div>


<div id="outline-container-org86b8c42" class="outline-3">
<h3 id="org86b8c42"><span class="section-number-3">3.4</span> 4 Incorrect Stroop Responses Analysis</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #b22222;">#</span><span style="color: #b22222;">output graphics :file "StroopPlotIncorrect.jpg"</span>


<span style="color: #a0522d;">congruent_wrong</span> = 0
<span style="color: #a0522d;">incongruent_wrong</span> = 0
<span style="color: #a020f0;">for</span> i <span style="color: #a020f0;">in</span> data.iterrows():
<span style="background-color: #f2f2f2;"> </span>   <span style="color: #a020f0;">if</span> <span style="color: #a020f0;">not</span> i[1][<span style="color: #8b2252;">'Correct'</span>]:
        <span style="color: #a020f0;">if</span> i[1][<span style="color: #8b2252;">'Word'</span>] == i[1][<span style="color: #8b2252;">'Ink'</span>]:
            <span style="color: #a0522d;">congruent_wrong</span>+=1
        <span style="color: #a020f0;">else</span>:
            <span style="color: #a0522d;">incongruent_wrong</span>+=1

<span style="color: #a0522d;">width</span> = 0.35
<span style="color: #a0522d;">state</span> = (<span style="color: #8b2252;">'Congruent'</span>, <span style="color: #8b2252;">'Incongruent'</span>)
<span style="color: #a0522d;">wrong_count</span>  = (congruent_wrong, incongruent_wrong)
<span style="color: #a0522d;">fig</span>, <span style="color: #a0522d;">ax</span> = plt.subplots()
<span style="color: #a0522d;">rects</span> = ax.bar(np.arange(2)+width, wrong_count, width, color=<span style="color: #8b2252;">'r'</span>)
ax.set_ylabel(<span style="color: #8b2252;">'Incorrect Responses'</span>)
ax.set_title(<span style="color: #8b2252;">'Incorrect Responses Based on Congruency'</span>)
ax.set_xticks(np.arange(2)+width)
ax.set_xticklabels((<span style="color: #8b2252;">'Congruent'</span>, <span style="color: #8b2252;">'Incongruent'</span>))

plt.savefig(<span style="color: #8b2252;">"StroopPlotIncorrect.jpg"</span>)
<span style="color: #8b2252;">"StroopPlotIncorrect.jpg"</span>
</pre>
</div>


<div class="figure">
<p><img src="StroopPlotIncorrect.jpg" alt="StroopPlotIncorrect.jpg" />
</p>
</div>
</div>
</div>


<div id="outline-container-orgcf74080" class="outline-3">
<h3 id="orgcf74080"><span class="section-number-3">3.5</span> Descriptive statistics</h3>
<div class="outline-text-3" id="text-3-5">
<p>
[##] participants completed [##] trials.
</p>

<p>
[Include code]
</p>

<p>
Congruent trials are where the colour word and the font colour match. Incongruent trials are where the font colour is different than the colour word.
</p>


<p>
We calculated the Stroop effect as the average response time for correct, incongruent trials minus correct, congruent trials.
</p>

<p>
[t-test comparing the means of (correct) congruent vs (correct) incongruent trials.]
</p>

<p>
[PLOT]
</p>
</div>
</div>
</div>

<div id="outline-container-org50c20d0" class="outline-2">
<h2 id="org50c20d0"><span class="section-number-2">4</span> Discussion and Conclusions</h2>
<div class="outline-text-2" id="text-4">
<p>
Our experiment takes less than two minutes to complete. It requires pressing the appropriate keyboard key rather than naming the colour aloud as Stroop did originally \cite{Stroop1935}. In our test, there are only 20 trials and a handful [##?] of participants. For a more reliable measure of the Stroop effect you would want to have considerably more participants along with more trials.
</p>
</div>
</div>

<div id="outline-container-org58cb0f1" class="outline-2">
<h2 id="org58cb0f1"><span class="section-number-2">5</span> References</h2>
<div class="outline-text-2" id="text-5">
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: \today</p>
<p class="author">Author: Andrej Glavic, Yuanxi Liu 20688855, Rachel Morton 20925026, Wasam Syed 20746474, Amy Wang</p>
<p class="date">Created: 2021-04-19 Mon 07:43</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
